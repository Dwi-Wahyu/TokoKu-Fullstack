generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    String?
  mediaId     Int?     @map("media_id")
  media       Media?   @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  variants ProductVariant[]
  options  ProductOption[]
  Discount Discount[]

  @@map("product")
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  sku       String   @unique
  gambarId  Int?     @map("media_id")
  gambar    Media?   @relation(fields: [gambarId], references: [id], onDelete: SetNull)
  price     Decimal
  cost      Decimal
  stock     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productId Int     @map("product_id")
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  optionValues  ProductVariantOptionValue[]
  OrderItem     OrderItem[]
  StockMovement StockMovement[]

  @@map("product_variant")
}

model ProductOption {
  id        Int                  @id @default(autoincrement())
  name      String
  productId Int                  @map("product_id")
  Product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@map("product_option")
}

model ProductOptionValue {
  id            Int                         @id @default(autoincrement())
  value         String
  optionId      Int                         @map("option_id")
  ProductOption ProductOption               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variantValues ProductVariantOptionValue[]

  @@map("product_option_value")
}

model ProductVariantOptionValue {
  id                 Int                @id @default(autoincrement())
  variantId          Int                @map("variant_id")
  optionValueId      Int                @map("option_value_id")
  ProductVariant     ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  ProductOptionValue ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  @@unique([variantId, optionValueId])
  @@map("product_variant_option_value")
}

model Order {
  id             Int         @id @default(autoincrement())
  status         OrderStatus @default(PENDING)
  totalAmount    Decimal     @map("total_amount")
  discountAmount Decimal     @map("discount_amount")
  finalAmount    Decimal     @map("final_amount")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  processedById  Int         @map("processed_by_id")
  User           User        @relation(fields: [processedById], references: [id])
  OrderItem      OrderItem[]

  @@map("order")
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  quantity        Int
  priceAtPurchase Decimal @map("price_at_purchase")
  costAtPurchase  Decimal @map("cost_at_purchase")

  orderId        Int             @map("order_id")
  variantId      Int?            @map("variant_id")
  Order          Order           @relation(fields: [orderId], references: [id])
  ProductVariant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  StockMovement  StockMovement?

  @@map("order_item")
}

model StockMovement {
  id             Int               @id @default(autoincrement())
  type           StockMovementType
  quantityChange Int               @map("quantity_change")
  notes          String?
  createdAt      DateTime          @default(now()) @map("created_at")

  variantId   Int  @map("variant_id")
  orderItemId Int? @unique @map("order_item_id")
  expenseId   Int? @map("expense_id")

  Expense        Expense?       @relation(fields: [expenseId], references: [id])
  OrderItem      OrderItem?     @relation(fields: [orderItemId], references: [id])
  ProductVariant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("stock_movement")
}

model Discount {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  type        DiscountType
  value       Decimal
  isActive    Boolean      @default(true) @map("is_active")
  startDate   DateTime?    @map("start_date")
  endDate     DateTime?    @map("end_date")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  Product     Product[]

  @@map("discount")
}

model Expense {
  id            Int             @id @default(autoincrement())
  description   String
  category      ExpenseCategory
  amount        Decimal
  expenseDate   DateTime        @default(now()) @map("expense_date")
  processedById Int             @map("processed_by_id")
  User          User            @relation(fields: [processedById], references: [id])
  StockMovement StockMovement[]

  @@map("expense")
}

model Media {
  id             Int              @id @default(autoincrement())
  url            String           @unique
  filename       String
  path           String
  mimetype       String?
  size           Int?
  altText        String?          @map("alt_text")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  Product        Product[]
  ProductVariant ProductVariant[]

  @@map("media")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  username  String    @unique
  password  String
  avatar    String?
  role      Role      @default(CASHIER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Expense   Expense[]
  Order     Order[]

  @@map("user")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ExpenseCategory {
  STOCK_PURCHASE
  SALARY
  OPERATIONAL
  UTILITIES
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  CASHIER
}

enum StockMovementType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
}
